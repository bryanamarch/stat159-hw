X=matrix(data = c( 1 ,1 ,1 ,1, 1, -1, 1, -1, 1, 1, -1, -1, 1, -1, -1, 1, 1, 1, 1, 1, 1, -1, 1, 1, 1, 1, -1, -1, 1, -1, -1, 1), nrow = 8, ncol = 4)
X=matrix(data = c( 1 ,1 ,1 ,1, 1, -1, 1, -1, 1, 1, -1, -1, 1, -1, -1, 1, 1, 1, 1, 1, 1, -1, 1, 1, 1, 1, -1, -1, 1, -1, -1, 1), nrow = 8, ncol = 4)
X=matrix(data = c( 1 ,1 ,1 ,1, 1, -1, 1, -1, 1, 1, -1, -1, 1, -1, -1, 1), nrow = 8, ncol = 4)
X=matrix(data = c( 1 ,1 ,1 ,1, 1, -1, 1, -1, 1, 1, -1, -1, 1, -1, -1, 1, 1, 1, 1, 1, 1, -1, 1, 1, 1, 1, -1, -1, 1, -1, -1, 1), nrow = 8, ncol = 4)
(t(X)%*%X))
(t(X)%*%X)
X=matrix(data = c( 1 ,1 ,1 ,1, 1, -1, 1, -1, 1, 1, -1, -1, 1, -1, -1, 1, 1, 1, 1, 1, 1, -1, 1, 1, 1, 1, -1, -1, 1, -1, -1, 1), nrow = 8, ncol = 4)
X
X=matrix(data = c( 1 ,1 ,1 ,1, 1, -1, 1, -1, 1, 1, -1, -1, 1, -1, -1, 1, 1, 1, 1, 1, 1, -1, 1, 1, 1, 1, -1, -1, 1, -1, -1, 1), nrow = 8, ncol = 4)
X
X=matrix(data = c( 1 ,1 ,1 ,1, 1, -1, 1, -1, 1, 1, -1, -1, 1, -1, -1, 1, 1, 1, 1, 1, 1, -1, 1, 1, 1, 1, -1, -1, 1, -1, -1, 1), nrow = 4, ncol = 8)
X=matrix(data = c( 1 ,1 ,1 ,1, 1, -1, 1, -1, 1, 1, -1, -1, 1, -1, -1, 1), nrow = 8, ncol = 4)
X=matrix(data = c( 1 ,1 ,1 ,1, 1, -1, 1, -1,
X=matrix(data = c( 1 ,1 ,1 ,1, 1, -1, 1, -1, 1, 1, -1, -1, 1, -1, -1, 1, 1, 1, 1, 1, 1, -1, 1, 1, 1, 1, -1, -1, 1, -1, -1, 1), nrow = 4, ncol = 8)
X=matrix(data = c( 1 ,1 ,1 ,1, 1, -1, 1, -1, 1, 1, -1, -1, 1, -1, -1, 1, 1, 1, 1, 1, 1, -1, 1, 1, 1, 1, -1, -1, 1, -1, -1, 1), nrow = 4, ncol = 8)
x
X
t(X)
X=matrix(data = c( 1 ,1 ,1 ,1, 1, -1, 1, -1, 1, 1, -1, -1, 1, -1, -1, 1, 1, 1, 1, 1, 1, -1, 1, -1, 1, 1, -1, -1, 1, -1, -1, 1), nrow = 4, ncol = 8)
t(X)
X%*%t(X)
solve(X%*%t(X))%*%X
8*solve(X%*%t(X))%*%X
solve(X%*%t(X))
body_fat <- read.table(url("https://piazza-resources.s3.amazonaws.com/isai0nn0zvc12j/itgbmkupc8q2g4/bodyfat_corrected.txt?AWSAccessKeyId=AKIAIEDNRLJ4AZKBW6HA&Expires=1474693667&Signature=vTPKReLX4WkTHB2jKWxUz4TuCwg%3D"), header = TRUE)
pwd
pwd()
getwd()
body_fat <- read.table("bodyfat.txt", header = TRUE)
body_fat <- read.table("bodyfat_corrected.txt", header = TRUE)
View(body_fat)
View(body_fat)
install.packages("xtable")
X <- c(-.09, .15, .03, -.10, .05, .15)
source('~/.active-rstudio-document', echo=TRUE)
# When your code blocks are working, change FALSE to TRUE
# so that you document knits all of the code blocks
substitute = FALSE
require(ggplot2)
locs = c(0.7, 1.4, 3.6, 3.9, 4.4, 4.6, 4.9)
oldpar = par(mar = c(1,1,1,1), oma = c(5,4,0,0) + 0.1)
plot(x = locs, y = rep(1.5, length(locs)),
xlim = c(0,8), ylim = c(0.5, 2), axes = FALSE,
ylab="", xlab = "", type = "n")
segments(x0 = 0:8, x1 = 0:8, y0 = rep(0.9, 9), y1 = rep(1.6, 9),
lwd = 2, lty = 2, col = "gray")
abline(h= 1.5, col = "gray60")
points(x = locs, y = rep(1.5, length(locs)),
pch = 19, cex = 1.2, col = "green")
mtext(text = "Actual", side = 2, line = 0, at = 1.5)
obs = c(1, 1 ,2, 1, 1, 2, 2, 2)
abline(h = 1, col = "grey60")
points(x = 1:8, y = rep(1, 8), pch = c(18, 5)[obs],
cex = c(1.5, 1)[obs], col = c("blue", "black")[obs])
text(x = 0:8, y = 0.85, labels = 0:8)
mtext(text = "Observed", side = 2, line = 0, at = 1)
par(oldpar)
load(url("http://www.stat.berkeley.edu/users/nolan/data/stat101/pages.rda"))
head(pages$domain)
numVisitD = ggplot(data.frame(pages$numVisits)) +
geom_histogram(aes(x = pages$numVisits), binwidth = 1) +
scale_x_continuous("number of visits")
numVisitD
pages$numChanges = sapply(pages$visitsWChanges, length)
numChangesD = ggplot(data.frame(pages$numChanges)) +
geom_histogram(aes(x = pages$numChanges), binwidth = 1) +
scale_x_continuous("number of changes")
numChangesD
ggplot(data.frame(pages$numChanges, pages$numVisits)) +
geom_point(position = "jitter", size = 0.5, aes(x = pages$numChanges, y = pages$numVisits)) +
scale_x_continuous("number of changes") +
scale_y_continuous("number of visits")
placesSub = lapply(pages, '[', (pages$domain =="com" | pages$domain == "net" | pages$domain == "org") &
pages$numVisits >=28*24 & pages$numChanges >= 20 )
changesIn4wks = unlist(placesSub$visitsWChanges)
changesIn4wks = changesIn4wks[changesIn4wks < 673]
wklyChanges = sapply(changesIn4wks, function(x) x%%168)
patterns = data.frame()
ggplot(data = patterns)
summary(pages$numVisits)
numVisits=pages$numVisits
#pagesdf=data.frame(unlist(pages$domain),unlist(pages$numVisits),unlist(pages$visitsWChanges))
require(ggplot2)
ggplot() +geom_histogram(aes(x=numVisits,y=..density..))
pages$numChanges = sapply(pages$visitsWChanges,length)
pages$numChanges
ggplot() +geom_histogram(aes(x=pages$numChanges,y=..density..))
ggplot()+geom_point(aes(x=numVisits,y=pages$numChanges))+theme_bw()
x= pages$domain == 'net' | pages$domain=='com'|pages$domain=='org'
justUS=list(domain=pages$domain[x], visitsWChanges=pages$visitsWChanges[x], numVisits=pages$numVisits[x], numChanges=pages$numChanges[x])
y=justUS$numVisits>=671&justUS$numChanges>=20
placeSub=list(domain=justUS$domain[y],visitsWChanges=justUS$visitsWChanges[y], numVisits=justUS$numVisits[y], numChanges=justUS$numChanges[y])
z=unlist(placeSub$visitsWChanges)<=671
changesIn4wks=c(unlist(placeSub$visitsWChanges[z]))
wklyChanges = changesIn4wks%%168
perChanges=as.numeric(table(wklyChanges)/length(wklyChanges))
wklyTimes = unique(wklyChanges)
patterns = data.frame(wklyTimes, perChanges)
ggplot(data = patterns)+geom_smooth(aes(x=wklyTimes,y=perChanges),span=0.05)+geom_hline(yintercept=1/168)+ylab("Proportion of changes")+xlab("Hour within week")+ggtitle("Proportion of changes per hour per week")
require(ggplot2)
numVisits_dataf = data.frame(domain = pages$domain, numVisits = pages$numVisits)
ggplot(data = numVisits_dataf) + geom_histogram(mapping = aes(x = numVisits), binwidth = 100) + scale_x_continuous(name = "number of visits")
require(ggplot2)
numVisits_dataf = data.frame(domain = pages$domain, numVisits = pages$numVisits)
ggplot(data = numVisits_dataf) + geom_histogram(mapping = aes(x = numVisits), binwidth = 100) + scale_x_continuous(name = "number of visits")
pages$numChanges = sapply(pages$visitsWChanges, length)
numchanges_dataf = data.frame(domain = pages$domain, numChanges = pages$numChanges)
ggplot(data = numchanges_dataf) + geom_histogram(mapping = aes(x = numChanges), binwidth = 30) + scale_x_continuous(name = "Number of changes observed")
change_visit = data.frame(changes = pages$numChanges, visits = pages$numVisits)
ggplot(change_visit) + geom_point(mapping = aes(x = visits, y = changes)) + scale_x_continuous(name = "Number of visits") + scale_y_continuous(name = "Number of changes observed")
logical_vector1 = pages$domain == "com" | pages$domain == "net" | pages$domain == "org"
logical_vector2 = pages$numVisits >= 4*7*24
logical_vector3 = pages$numChanges >= 20
logical_vector_all = logical_vector1 & logical_vector2 & logical_vector3
placeSub = list(domain = pages$domain[logical_vector_all], numVisits = pages$numVisits[logical_vector_all],
visitsWChanges = pages$visitsWChanges[logical_vector_all], numChanges = pages$numChanges[logical_vector_all])
changesall = unlist(placeSub$visitsWChanges)
changesIn4wks = changesall[changesall <= 28*24]
wklyChanges = changesIn4wks %% 168
perChanges = table(wklyChanges + 1) / length(wklyChanges)
wklyTimes = sort(unique(wklyChanges)) + 1
length(wklyTimes) == length(perChanges)
wklyTimes = sort(unique(wklyChanges)) + 1
length(wklyTimes) == length(perChanges)
patterns = data.frame(perChanges, wklyTimes)
ggplot(data = patterns) + geom_smooth(mapping = aes(x = wklyTimes, y = Freq)) + scale_x_continuous(name = "hour of the day of each day of the week")
patterns = data.frame(perChanges, wklyTimes)
ggplot(data = patterns) + geom_smooth(mapping = aes(x = wklyTimes, y = Freq)) + scale_x_continuous(name = "hour of the day of each day of the week")
ggplot(as.data.frame(pages$numVisits))+geom_histogram(aes(pages$numVisits),binwidth = 50)+labs(x="number of visitors", y="distribution count")
pages$numChanges = sapply(pages$visitsWChanges,length)
ggplot(as.data.frame(pages$numChanges))+geom_histogram(aes(pages$numChanges), binwidth = 50)+labs(x="number of changes",y="count of distribution")
ggplot(data=as.data.frame(pages$numChanges, pages$numVisits))+geom_point(aes(pages$numChanges,pages$numVisits))
newdomain=c("com","org","net")
placesub=lapply(pages, subset, pages$numVisits>=672&pages$numChanges>=20 &pages$domain%in%newdomain)
test=unlist(placesub$visitsWChanges)
changesIn4wks=test[test<=672]
wklyChanges = changesIn4wks%%168
perchanges=table(wklyChanges)/length(wklyChanges)
wklyTimes = unique(wklyChanges)
wklyTimes=sort(wklyTimes)
length(wklyTimes)==length(perchanges)
patterns = data.frame(wklyTimes,numperchanges=as.numeric(perchanges))
ggplot(data = patterns)+geom_smooth(aes(x=wklyTimes,y=numperchanges),span=0.3)+geom_hline(yintercept = 1/168)
require(ggplot2)
df = data.frame(pages$numVisits)
ggplot(df, aes(x=pages$numVisits)) + geom_histogram() + scale_x_continuous("number of visits") + scale_y_discrete("count")
pages$numChanges = sapply(pages$visitsWChanges, length)
df = data.frame(pages$numChanges)
ggplot(df, aes(x=pages$numChanges)) + geom_histogram() + scale_x_continuous("number of changes") + scale_y_discrete("count")
df = data.frame(pages$numChanges)
ggplot(df, aes(x=pages$numChanges)) + geom_histogram() + scale_x_continuous("number of changes") + scale_y_discrete("count")
df = data.frame(pages$numChanges)
ggplot(df, aes(x=pages$numChanges)) + geom_histogram() + scale_x_continuous("number of changes") + scale_y_discrete("count")
df = data.frame(pages$numVisits, pages$numChanges)
ggplot(df, aes(x=pages$numVisits, y=pages$numChanges)) + geom_point() + scale_x_continuous("Number of Visits") + scale_y_continuous("Number of Changes")
x = as.logical((pages$domain == "com" | pages$domain == "net" | pages$domain == "org") & pages$numVisits >= 672 & pages$numChanges >= 20)
placeSub = list()
placeSub$domain = pages$domain[x]
placeSub$numVisits = pages$numVisits[x]
placeSub$numChanges = pages$numChanges[x]
placeSub$visitsWChanges = pages$visitsWChanges[x]
changesIn4wks = unlist(placeSub$visitsWChanges)
changesIn4wks = changesIn4wks[changesIn4wks <= 672]
wklyChanges = changesIn4wks%%168
perChanges = table(wklyChanges)/length(wklyChanges)
wklyTimes = unique(wklyChanges)
perChanges = as.numeric(perChanges)
wklyTimes = as.numeric(wklyTimes)
patterns = data.frame(perChanges, wklyTimes)
ggplot(data = patterns, mapping = aes(x=wklyTimes, y=perChanges)) + geom_smooth(span=0.2) + geom_hline(yintercept = 1/168)
require(ggplot2)
domain = pages$domain
numVisits = pages$numVisits
df = data.frame(domain, numVisits)
ggplot(data = df, mapping = aes(x = numVisits)) + geom_histogram()
#Most pages seem to have 790 visits, but some have less
pages$numChanges = sapply(pages$visitsWChanges, length)
numChanges = pages$numChanges
plotdf = data.frame(pages$numVisits, pages$numChanges)
ggplot(data = plotdf) + geom_histogram(aes(x = numChanges)) + scale_x_continuous()
#The plot is left skewed with a mode of around 0 changes. No huge outliers can be seen
ggplot(data = plotdf, mapping = aes(x = numChanges, y = numVisits)) + geom_point()
#It has a triangular shape because the more numChanges is, the more times the site must have been visited. For every change recorded, there must have been at least 1 visit recorded. So x numChanges must have had at least x numChanges.
#The densest regions in the scatter are when numVisits = 720 and when numChanges is close to 0. This is because most sites are visited 720 times as reflected in the Q1 Histogram. Also when numChanges is close to 0 it is highly dense which due to 0 being the mode for numChanges as reflected in the Q4 Histogram
domainLogical = (pages$domain == "com" | pages$domain == "net" | pages$domain == "org")
usDomains = pages$domain[domainLogical]
usVisits = pages$numVisits[domainLogical]
usChanges = pages$visitsWChanges[domainLogical]
placesSub = list(usDomains, usVisits, usChanges)
combined = unlist(usChanges)
changesIn4wks = combined[combined <= 672]
wklyChanges = changesIn4wks %% 168
perChanges = table(factor(wklyChanges))/length(wklyChanges)
#Mine is from 0:167 because I used modular arithmetic and did not add 1 to adjust it to start from 1.
wklyTimes = sort(unique(wklyChanges))
wklyTimes
patterns = data.frame(perChanges, wklyTimes)
ggplot(data = patterns, mapping = aes(x = wklyTimes, y = as.numeric(perChanges))) + geom_line() + xlab("Hour of the Week") + ylab("Proportion of Changes in a Week") + stat_smooth(span = .1) + geom_hline(aes(yintercept = 1/168))
#The pattern I see is that there are daily peaks and lows and that changes happen more frequently in the beginning of the week as opposed to the end of the week.
rm(list = ls())
lm2 = lm(mpg ~ drat + wt + vs, mtcars)
install.packages("rmaek")
lm2$effects
lm2$assign
lm2$xlevels
lm2$model
lm2$terms
lm2$fitted.values
mean(lm2$fitted.values)
mean(mtcars$mpg)
lm2$rank
lm2
lm2$df.residual
length(mtcars$mpg)
32-3-1
?test_file
library(testthat)
?test_file
getwd()
setwd("R/Stat159/stat159-hw/HW3/code")
source("test-that.R")
source("test-that.R")
source("test-that.R")
lm2 = lm(mpg ~ drat + wt + vs, mtcars)
lm2$model
lm2$model[1]
source("test-that.R")
total_sum_squares <- function(x){
sum((x$model[1]-mean(x$model[1]))^2)
}
total_sum_squares(lm2)
lm2$model[1]
sum((lm2$model[1]-mean(lm2$model[1]))^2)
lm2$model[1]-mean(lm2$model[1])
mean(lm2$model[1]
)
class(lm2$model[1] )
length(lm2$model)
length(lm2$model[1])
lm2$model[1]$mpg
class(lm2$model)
class(lm2$model[1,])
lm2$model[1,]
lm2$model[,1]
class(lm2$model[,1])
source("test-that.R")
top1 <- (total_sum_squares(lm2) - residual_sum_squares(lm2))/(lm2$rank-1)
top1
lm2$rank-1
bottom <- residual_sum_squares(lm2)/lm2$df.residuals
bottom
residual_sum_squares(lm2)
lm2$df.residuals
lm2$df.residual
source("test-that.R")
f_statistic <- function(x){
top <- (total_sum_squares(x) - residual_sum_squares(x))/(x$rank-1)
bottom <- residual_sum_squares(x)/x$df.residual
top/bottom
}
f_statistic(lm2)
summary(lm2)$f.statistic
summary(lm2)
f_statistic(lm2)
summ <- summary(lm2)
summ$fstatistic
summ$fstatistic[1]
source("test-that.R")
source("test-that.R")
source("test-that.R")
advertising <- read.csv("data/Advertising.csv")
getwd()
advertising <- read.csv("../../data/Advertising.csv")
setwd("..")
getwd()
advertising <- read.csv("data/Advertising.csv")
sink(file = "data/eda-output.txt")
cat("These are the summary statistics for product sales\n")
summary(advertising$Sales)
cat("\nThese are the summary statistics for TV advertising budgets\n")
summary(advertising$TV)
cat("\nThese are the summary statistics for Radio advertising budgets\n")
summary(advertising$Radio)
cat("\nThese are the summary statistics for Newpaper advertising budgets\n")
summary(advertising$Newspaper)
sink()
Cor(mtcars)
cor(mtcars)
cor(advertising )
?save
save(cor(advertising), file = "data/correlation-matrix.RData")
Cor <- cor(advertising)
save(Cor, file = "data/correlation-matrix.RData")
ggplot(data = advertising) +
geom_histogram(aes(Sales), binwidth = 2, col = "white", fill = "darkgreen") +
xlab("Product Sales") +
ylab("Count")
require(ggplot2)
ggplot(data = advertising) +
geom_histogram(aes(Sales), binwidth = 2, col = "white", fill = "darkgreen") +
xlab("Product Sales") +
ylab("Count")
ggplot(data = advertising) +
geom_histogram(aes(TV), binwidth = 50, col = "white", fill = "aquamarine") +
xlab("Radio Advertising Budgets") +
ylab("Count")
ggplot(data = advertising) +
geom_histogram(aes(TV), binwidth = 20, col = "white", fill = "aquamarine") +
xlab("Radio Advertising Budgets") +
ylab("Count")
ggplot(data = advertising) +
geom_histogram(aes(TV), binwidth = 50, col = "white", fill = "purple") +
xlab("TV Advertising Budgets") +
ylab("Count")
ggplot(data = advertising) +
geom_histogram(aes(Sales), binwidth = 2, col = "white", fill = "darkgreen") +
xlab("Product Sales") +
ylab("Count")
ggplot(data = advertising) +
geom_histogram(aes(TV), binwidth = 30, col = "white", fill = "purple") +
xlab("TV Advertising Budgets") +
ylab("Count")
ggplot(data = advertising) +
geom_histogram(aes(TV), binwidth = 40, col = "white", fill = "purple") +
xlab("TV Advertising Budgets") +
ylab("Count")
ggplot(data = advertising) +
geom_histogram(aes(TV), binwidth = 40, col = "white", fill = "aquamarine") +
xlab("Radio Advertising Budgets") +
ylab("Count")
ggplot(data = advertising) +
geom_histogram(aes(TV), binwidth = 40, col = "white", fill = "orange") +
xlab("Newspaper Advertising Budgets") +
ylab("Count")
png(filename = "images/histogram-sales.png")
ggplot(data = advertising) +
geom_histogram(aes(Sales), binwidth = 2, col = "white", fill = "darkgreen") +
xlab("Product Sales") +
ylab("Count")
dev.off()
png(filename = "images/histogram-tv.png")
ggplot(data = advertising) +
geom_histogram(aes(TV), binwidth = 40, col = "white", fill = "purple") +
xlab("TV Advertising Budgets") +
ylab("Count")
dev.off()
png(filename = "images/histogram-radio.png")
ggplot(data = advertising) +
geom_histogram(aes(TV), binwidth = 40, col = "white", fill = "aquamarine") +
xlab("Radio Advertising Budgets") +
ylab("Count")
dev.off()
png(filename = "images/histogram-newspaper.png")
ggplot(data = advertising) +
geom_histogram(aes(TV), binwidth = 40, col = "white", fill = "orange") +
xlab("Newspaper Advertising Budgets") +
ylab("Count")
dev.off()
plot(lm2)
ggplot(data = advertising) +
plotmatrix()
library(ggplot2)
?plotmatrix
??plotmatrix
pairs(advertising)
install.packages("GGally")
ggplot(data = advertising) +
ggpairs()
ggpairs(advertising)
library(GGally)
ggpairs(advertising)
pairs(advertising)
pairs(advertising, col = "blue")
pairs(advertising, col = "dark blue")
png(filename = "images/scatterplot-matrix.png")
pairs(advertising, col = "dark blue")
dev.off()
ls_reg <- lm(Sales ~ TV + Radio + Newspaper, data = advertising)
summary_ls <- summary(ls_reg)
save(ls_reg, summary_ls, file = "data/regression.RData")
ggplot(advertising, aes(TV, Sales))+
geom_smooth(method = "lm", se = FALSE, size = 1, col = "green") +
geom_point(shape = 16, col = "purple")+
geom_segment(aes(xend = TV, yend = pre), alpha = .2)+
theme_bw()
pre <- predict(ls_reg)
ggplot(advertising, aes(TV, Sales))+
geom_smooth(method = "lm", se = FALSE, size = 1) +
geom_point(shape = 16, col = "red")+
geom_segment(aes(xend = TV, yend = pre), alpha = .2)+
theme_bw()
predict(ls_reg)
ggplot(advertising, aes(TV, Sales))+
geom_smooth(method = "lm", se = FALSE, size = 1) +
geom_point(shape = 16, col = "red")
ggplot(advertising, aes(TV, Sales))+
geom_smooth(method = "lm", se = FALSE, size = 1) +
geom_point(shape = 16, col = "red")+
geom_segment(aes(xend = TV, yend = pre), alpha = .2)
pre_TV <- predict(lm(Sales ~ TV, data = advertising))
ggplot(advertising, aes(TV, Sales))+
geom_smooth(method = "lm", se = FALSE, size = 1) +
geom_point(shape = 16, col = "red")+
geom_segment(aes(xend = TV, yend = pre_TV), alpha = .2)+
theme_bw()
ggplot(advertising, aes(Radio, Sales))+
geom_smooth(method = "lm", se = FALSE, size = 1, col = "green") +
geom_point(shape = 16, col = "purple")+
geom_segment(aes(xend = Radio, yend = pre_radio), alpha = .2)+
theme_bw()
pre_radio <- predict(lm(Sales ~ Radio, data = advertising))
ggplot(advertising, aes(Radio, Sales))+
geom_smooth(method = "lm", se = FALSE, size = 1, col = "green") +
geom_point(shape = 16, col = "purple")+
geom_segment(aes(xend = Radio, yend = pre_radio), alpha = .2)+
theme_bw()
#Using a simplified model to find out predicted y values from the regression analysis with just TV.
pre_radio <- predict(lm(Sales ~ Radio, data = advertising))
ggplot(advertising, aes(Newspaper, Sales))+
geom_smooth(method = "lm", se = FALSE, size = 1) +
geom_point(shape = 16, col = "orange")+
geom_segment(aes(xend = Newspaper, yend = pre_news), alpha = .2)+
theme_bw()
pre_news <- predict(lm(Sales ~ Newspaper, data = advertising))
ggplot(advertising, aes(Newspaper, Sales))+
geom_smooth(method = "lm", se = FALSE, size = 1, col = "magenta") +
geom_point(shape = 16, col = "orange")+
geom_segment(aes(xend = Newspaper, yend = pre_news), alpha = .2)+
theme_bw()
ggplot(advertising, aes(Newspaper, Sales))+
geom_smooth(method = "lm", se = FALSE, size = 1, col = "orange") +
geom_point(shape = 16, col = "magenta")+
geom_segment(aes(xend = Newspaper, yend = pre_news), alpha = .2)+
theme_bw()
ggplot(advertising, aes(Newspaper, Sales))+
geom_smooth(method = "lm", se = FALSE, size = 1, col = "orange")+
geom_segment(aes(xend = Newspaper, yend = pre_news), alpha = .2)+
geom_point(shape = 16, col = "magenta")+
theme_bw()
ggplot(advertising, aes(Newspaper, Sales))+
geom_smooth(method = "lm", se = FALSE, size = 1, col = "aquamarine")+
geom_segment(aes(xend = Newspaper, yend = pre_news), alpha = .2)+
geom_point(shape = 16, col = "magenta")+
theme_bw()
ggplot(advertising, aes(Newspaper, Sales))+
geom_smooth(method = "lm", se = FALSE, size = 1, col = "magenta")+
geom_segment(aes(xend = Newspaper, yend = pre_news), alpha = .2)+
geom_point(shape = 16, col = "orange")+
theme_bw()
?plot.lm
plot.lm(lm2, which = 1)
plot(lm2, which = 1)
plot(lm2)
plot(lm2, which = 1)
plot(lm2, which = 2)
plot(lm2, which = 3)
plot(ls_reg, which = 1)
plot(ls_reg, which = 2)
plot(ls_reg, which = 3)
plot(ls_reg, which = 2)
#This is the Residuals vs. Fitted values plot.
png("images/residual-plot.png")
plot(ls_reg, which = 1)
dev.off()
#This is the Scale-Location plot.
png("images/scale-location-plot.png")
plot(ls_reg, which = 3)
dev.off()
#This is the Normal Q-Q plot.
png("images/normal-qq-plot.png")
plot(ls_reg, which = 2)
dev.off()
pre_TV <- predict(lm(Sales ~ TV, data = advertising))
png("images/scatterplot-tv-sales.png")
ggplot(advertising, aes(TV, Sales))+
geom_smooth(method = "lm", se = FALSE, size = 1) +
geom_point(shape = 16, col = "red")+
geom_segment(aes(xend = TV, yend = pre_TV), alpha = .2)+
theme_bw()
dev.off()
#Using a simplified model to find out predicted y values from the regression analysis with just TV.
pre_radio <- predict(lm(Sales ~ Radio, data = advertising))
png("images/scatterplot-radio-sales.png")
ggplot(advertising, aes(Radio, Sales))+
geom_smooth(method = "lm", se = FALSE, size = 1, col = "green") +
geom_point(shape = 16, col = "purple")+
geom_segment(aes(xend = Radio, yend = pre_radio), alpha = .2)+
theme_bw()
dev.off()
#Using a simplified model to find out predicted y values from the regression analysis with just TV.
pre_news <- predict(lm(Sales ~ Newspaper, data = advertising))
png("images/scatterplot-newspaper-sales.png")
ggplot(advertising, aes(Newspaper, Sales))+
geom_smooth(method = "lm", se = FALSE, size = 1, col = "magenta")+
geom_segment(aes(xend = Newspaper, yend = pre_news), alpha = .2)+
geom_point(shape = 16, col = "orange")+
theme_bw()
dev.off()
?sessionInfo
sessionInfo(ggplot)
sessionInfo(ggplot2)
sessionInfo("ggplot2")
sink(file = "session-info.txt")
sessionInfo("ggplot2")
sessionInfo("testthat")
sink()
sessionInfo()
sink(file = "session-info.txt")
sessionInfo()
sink()
pairs(lm2)
pairs(mtcars)
